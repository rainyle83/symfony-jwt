<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'security.authentication.listener.jwt.api' shared service.

@trigger_error('The "security.authentication.listener.jwt.api" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0', E_USER_DEPRECATED);

include_once $this->targetDirs[3].'\\vendor\\lexik\\jwt-authentication-bundle\\TokenExtractor\\TokenExtractorInterface.php';
include_once $this->targetDirs[3].'\\vendor\\lexik\\jwt-authentication-bundle\\TokenExtractor\\AuthorizationHeaderTokenExtractor.php';

$this->services['security.authentication.listener.jwt.api'] = $instance = new \Lexik\Bundle\JWTAuthenticationBundle\Security\Firewall\JWTListener(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}, array('authorization_header' => array('enabled' => true, 'prefix' => 'Bearer', 'name' => 'Authorization'), 'cookie' => array('enabled' => false, 'name' => 'BEARER'), 'query_parameter' => array('enabled' => false, 'name' => 'bearer'), 'throw_exceptions' => false, 'create_entry_point' => true, 'authentication_provider' => 'lexik_jwt_authentication.security.authentication.provider', 'authentication_listener' => 'lexik_jwt_authentication.security.authentication.listener'));

$instance->setDispatcher(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->getDebug_EventDispatcherService()) && false ?: '_'});
$instance->addTokenExtractor(${($_ = isset($this->services['lexik_jwt_authentication.extractor.authorization_header_extractor.api']) ? $this->services['lexik_jwt_authentication.extractor.authorization_header_extractor.api'] : $this->services['lexik_jwt_authentication.extractor.authorization_header_extractor.api'] = new \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor('Bearer', 'Authorization')) && false ?: '_'});

return $instance;
